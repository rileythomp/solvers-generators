{"version":3,"sources":["./src/app/components/about/about.component.ts","./src/app/components/about/about.component.html","./src/app/components/header/header.component.ts","./src/app/components/header/header.component.html","./src/environments/environment.ts","./src/app/components/mazes/mazes.component.ts","./src/app/components/mazes/mazes.component.html","./src/app/components/footer/footer.component.ts","./src/app/components/footer/footer.component.html","./src/app/services/sudokusolver.service.ts","./src/app/components/sudoku-table/sudoku-table.component.ts","./src/app/components/sudoku-table/sudoku-table.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/sudoku-stats/sudoku-stats.component.ts","./src/app/components/sudoku-stats/sudoku-stats.component.html","./src/app/components/sudoku/sudoku.component.ts","./src/app/components/sudoku/sudoku.component.html","./src/app/components/truchet/truchet.component.ts","./src/app/components/truchet/truchet.component.html","./src/app/app-routing.module.ts","./src/app/services/mazes.service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.less']\n})\nexport class AboutComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div>\n    <p>\n        This site is a collection of solvers and generators I've written in Go and JavaScript. So far it has 3 sections, mazes, Sudoku, and Truchet tiles.\n    </p>\n\n    <div class='description'>\n        <h1>Mazes</h1>\n        <p><a href=\"https://weblog.jamisbuck.org/\">Jamis Buck</a> has a blog series from 2011 that I came across which contains descriptions and animations of 11 maze algorithms.\n            Here is the list of all 11 maze generation algorithms that I've implemented in Go.\n            You can see more details about each algorithm under the <a href='/mazes#maze-stats'>Mazes</a> section.</p>\n        <ul>\n            <li><a target='_blank'href=\"https://weblog.jamisbuck.org/2010/12/27/maze-generation-recursive-backtracking.html\">Recursive Backtracking</a></li>\n            <li><a target='_blank'href=\"http://weblog.jamisbuck.org/2010/12/29/maze-generation-eller-s-algorithm\">Eller's Algorithm</a></li>\n            <li><a target='_blank' href=\"https://weblog.jamisbuck.org/2011/1/3/maze-generation-kruskal-s-algorithm.html\">Kruskal's Algorithm</a></li>\n            <li><a target='_blank' href=\"https://weblog.jamisbuck.org/2011/1/10/maze-generation-prim-s-algorithm.html\">Prim's Algorithm</a></li>\n            <li><a target='_blank' href=\"https://weblog.jamisbuck.org/2011/1/12/maze-generation-recursive-division-algorithm.html\">Recursive Division</a></li>\n            <li><a target='_blank'href=\"https://weblog.jamisbuck.org/2011/1/17/maze-generation-aldous-broder-algorithm.html\">Aldous-Broder Alogirthm</a></li>\n            <li><a href=\"https://weblog.jamisbuck.org/2011/1/20/maze-generation-wilson-s-algorithm.html\" target=\"_blank\">Wilson's Algorithm</a></li>\n            <li><a href=\"https://weblog.jamisbuck.org/2011/1/24/maze-generation-hunt-and-kill-algorithm.html\" target=\"_blank\">Hunt and Kill Algorithm</a></li>\n            <li><a href=\"https://weblog.jamisbuck.org/2011/1/27/maze-generation-growing-tree-algorithm.html\" target=\"_blank\">Growing Tree Algorithm</a></li>\n            <li><a href=\"https://weblog.jamisbuck.org/2011/2/1/maze-generation-binary-tree-algorithm.html\" target=\"_blank\">Binary Tree Algorithm</a></li>\n            <li><a href=\"https://weblog.jamisbuck.org/2011/2/3/maze-generation-sidewinder-algorithm.html\" target=\"_blank\">Sidewinder Algorithm</a></li>\n        </ul>\n        <span>The source code for all the maze generation algorithms can be found </span>\n        <a href=\"https://gitlab.com/rileythomp14/mazes\" target=\"_blank\">here.</a>\n    </div>\n\n    <div class='description'>\n        <h1>Sudoku</h1>\n        <p>I created 5 different sudoku solvers in Go, each using a different combination of solving techniques. Each solver was tested on 3000 sudoku boards, the results can be found <a href=\"/sudoku#sudoku-stats\">here</a>, and the source code can be found <a href=\"https://gitlab.com/rileythomp14/sudoku\" target=\"_blank\">here.</a></p>\n    </div>\n\n    <div class='description'>\n        <h1>Truchet Tiles</h1>\n        <p>A Truchet tile generator written in JavaScript. More info is available in the <a href=\"/truchet\">Truchet</a> section and the source code can be found <a href=\"https://gitlab.com/rileythomp14/solvers-generators/-/blob/master/src/app/components/truchet/truchet.component.ts\" target=\"_blank\">here.</a></p>\n    </div>\n    \n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.less']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<header class='header'>\n    <h1>Solvers and Generators</h1>\n    <nav>\n        <a routerLink='/mazes'>Mazes</a> &nbsp;&nbsp;|&nbsp;&nbsp;\n        <a routerLink='/sudoku'>Sudoku</a> &nbsp;&nbsp;|&nbsp;&nbsp;\n        <a routerLink='/truchet'>Truchet</a> &nbsp;&nbsp;|&nbsp;&nbsp;\n        <a routerLink='/about'> About</a>\n    </nav>\n</header>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit, ɵCompiler_compileModuleSync__POST_R3__ } from '@angular/core';\nimport { MazesService } from 'src/app/services/mazes.service';\nimport { TimeInterval, VirtualTimeScheduler } from 'rxjs';\n\n@Component({\n\tselector: 'app-mazes',\n\ttemplateUrl: './mazes.component.html',\n\tstyleUrls: ['./mazes.component.less']\n})\nexport class MazesComponent implements OnInit {\n\treadonly directions:any[] = [\n\t\t{prime: 7, dr: 1, dc: 0}, // bottom\n\t\t{prime: 3, dr: 0, dc: 1}, // right\n\t\t{prime: 2, dr:-1, dc: 0}, // up\n\t\t{prime: 5, dr: 0, dc: -1} // left\n\t]\n\n\tboardLen:number = 15\n\tvisits:number = 0\n\tmaxVisits:number = 0\n\tstartRow:number = 0\n\tstartCol:number = 0\n\tmaxRow:number = 0\n\tmaxCol:number = 0\n\trow:number = 0\n\tcol:number = 0\n\n\tmazeData:any\n\tsolveMaze:any\n\tplayMaze:any\n\tsolveInterval:NodeJS.Timeout\n\tmaze:HTMLElement;\n\n\tconstructor(private mazesGoService: MazesService) { }\n\n\tngOnInit(): void {\n\t\tthis.generateMaze(\"rb\", 12);\n\t}\n\n\t// Creates and displays a maze \n\tdisplayMaze(res):void {\n\t\tthis.maze = document.createElement('table');\n\t\tthis.maze.style.margin = '0 auto';\n\t\tfor (let i = 0; i < res.length; i++) {\n\t\t\tlet r = Math.floor(i/this.boardLen);\n\t\t\tlet c = i%this.boardLen;\n\t\t\tif (c == 0) {\n\t\t\t\tlet row = document.createElement('tr');\n\t\t\t\tthis.maze.appendChild(row);\n\t\t\t}\n\t\t\tlet cell = document.createElement('td');\n\t\t\tcell.style.height = '2em';\n\t\t\tcell.style.width = '2em';\n\t\t\tcell.style.textAlign = 'center';\n\t\t\tcell.style.border = '1px dotted grey'\n\t\t\tif (res[i]%2 == 0) {\n\t\t\t\tcell.style.borderTop = '2px solid black'\n\t\t\t}\n\t\t\tif (res[i]%3 == 0) {\n\t\t\t\tcell.style.borderRight = '2px solid black'\n\t\t\t}\n\t\t\tif (res[i]%5 == 0) {\n\t\t\t\tcell.style.borderLeft = '2px solid black'\n\t\t\t}\n\t\t\tif (res[i]%7 == 0) {\n\t\t\t\tcell.style.borderBottom = '2px solid black'\n\t\t\t}\n\t\t\tthis.maze.children[r].appendChild(cell);\n\t\t}\n\t\tthis.maze.style.borderCollapse = 'collapse';\n\t\tdocument.getElementById('maze').innerHTML = '';\n\t\tdocument.getElementById('maze').appendChild(this.maze);\n\t\t(<HTMLElement>this.maze.children[this.row].children[this.col]).style.backgroundColor = 'lightgreen';\n\t}\n\n\t// Creates maze structure from raw maze data\n\tgetMaze(res) {\n\t\tlet mz = []\n\t\tfor (let i = 0; i < this.boardLen; i++) {\n\t\t\tlet row = [];\n\t\t\tfor (let j = 0; j < this.boardLen; j++) {\n\t\t\t\trow.push({\n\t\t\t\t\trow: i,\n\t\t\t\t\tcol: j,\n\t\t\t\t\tval: res[this.boardLen*i+j],\n\t\t\t\t\tvisited: false\n\t\t\t\t});\n\t\t\t}\n\t\t\tmz.push(row);\n\t\t}\n\t\treturn mz;\n\t}\n\n\t// Initializes maze structure for determining longest path and playing on\n\tinitMazes(res):void {\n\t\tthis.visits = 0\n\t\tthis.maxVisits = 0\n\t\tthis.startRow = 0\n\t\tthis.startCol = 0\n\t\tthis.maxRow = 0\n\t\tthis.maxCol = 0\n\t\tthis.row = 0\n\t\tthis.col = 0\n\t\tthis.solveMaze = this.getMaze(res);\n\t\tthis.playMaze = JSON.parse(JSON.stringify(this.solveMaze));\n\t}\n\n\t// Displays and initializes a maze of a given type\n\tgenerateMaze(type:string, boardLen:number):void {\n\t\tthis.boardLen = boardLen;\n\t\tthis.mazesGoService.getMaze(this.boardLen, type).subscribe(\n\t\t\tres => {\n\t\t\t\tif (res.toString() == 'err') {\n\t\t\t\t\talert('Failed to generate maze');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.mazeData = res;\n\t\t\t\tthis.initMazes(res);\n\t\t\t\tthis.displayMaze(res);\n\t\t\t\tdocument.addEventListener('keydown', this.movePlayer)\t\t\t\n\t\t\t},\n\t\t\terr => {\n\t\t\t\talert('Maze could not be generated');\n\t\t\t\tconsole.log(err);\n\t\t\t}\n\t\t)\n\t}\n\n\t// Tests mazes API\n\ttestMazes():void {\n\t\tthis.mazesGoService.testMazes().subscribe(res => {\n\t\t\tconsole.log(res);\n\t\t})\n\t}\n\n\t// Stops solving the maze\n\tstopSolve():void {\n\t\tclearInterval(this.solveInterval);\n\t}\n\n\t// Updates the maze after moving\n\tupdateMaze(dir, dv, r, c):boolean {\n\t\tthis.solveMaze[this.row][this.col].visited = true;\n\t\tthis.solveMaze[this.row][this.col].val *= dir.prime;\n\t\tthis.row += dir.dr\n\t\tthis.col += dir.dc\n\t\tthis.visits += dv\n\t\tif (this.visits > this.maxVisits) {\n\t\t\tthis.maxVisits = this.visits;\n\t\t\tthis.maxRow = this.row;\n\t\t\tthis.maxCol = this.col;\n\t\t\tthis.startRow = r;\n\t\t\tthis.startCol = c;\n\t\t}\n\t\tif (this.visits < 0) {\n\t\t\tconsole.log('Visits counter error: ', this.visits);\n\t\t}\n\t\treturn true;\n\t}\n\n\t// Moves the player around the maze\n\tmovePlayer = (ev) => {\n\t\tev.preventDefault();\n\t\t(<HTMLElement>this.maze.children[this.row].children[this.col]).style.backgroundColor = '#E6E6FA'\n\t\tif (ev.key == 'ArrowDown' && this.row < this.playMaze.length-1 && this.playMaze[this.row][this.col].val%7 != 0) {\n\t\t\tthis.row += 1;\n\t\t}\n\t\telse if (ev.key == 'ArrowUp' && this.row > 0 && this.playMaze[this.row][this.col].val%2 != 0) {\n\t\t\tthis.row -= 1;\n\t\t}\n\t\telse if (ev.key == 'ArrowLeft' && this.col > 0 && this.playMaze[this.row][this.col].val%5 != 0) {\n\t\t\tthis.col -= 1;\n\t\t}\n\t\telse if (ev.key == 'ArrowRight' && this.col < this.playMaze[0].length-1  && this.playMaze[this.row][this.col].val%3 != 0) {\n\t\t\tthis.col += 1;\n\t\t}\n\t\t(<HTMLElement>this.maze.children[this.row].children[this.col]).style.backgroundColor = 'lightgreen'\n\t\tif (this.row == this.maxRow && this.col == this.maxCol && this.row+this.col > 0) {\n\t\t\talert('You Won');\n\t\t\tdocument.removeEventListener('keydown', this.movePlayer);\n\t\t\treturn;\n\t\t}\n\t};\n\n\t// Makes the maze playable\n\tmakeMazePlayable(color):void {\n\t\tthis.row = this.startRow;\n\t\tthis.col = this.startCol;\n\t\t(<HTMLElement>this.maze.children[this.row].children[this.col]).style.backgroundColor = 'lightgreen';\n\t\t(<HTMLElement>this.maze.children[this.maxRow].children[this.maxCol]).style.backgroundColor = color;\n\t\tdocument.addEventListener('keydown', this.movePlayer)\n\t}\n\n\t// Determines the longest path in the maze\n\tgetLongestPath(interval:number):void {\n\t\t(<HTMLElement>this.maze.children[this.row].children[this.col]).style.backgroundColor = '#E6E6FA';\n\t\tthis.maxVisits = 0\n\t\tthis.maxRow = 0\n\t\tthis.maxCol = 0\n\n\t\t// find longest path in maze\n\t\tfor (let r = 0; r < this.boardLen; r++) {\n\t\t\tfor (let c = 0; c < this.boardLen; c++) {\n\t\t\t\tlet moved = true;\n\t\t\t\tthis.visits = 0\n\t\t\t\tthis.row = r\n\t\t\t\tthis.col = c\n\t\t\t\twhile (moved) {\n\t\t\t\t\tmoved = false;\n\t\t\t\t\tfor (let dir of this.directions) {\n\t\t\t\t\t\t// if you can move to a cell\n\t\t\t\t\t\tif (this.solveMaze[this.row][this.col].val%dir.prime != 0\n\t\t\t\t\t\t\t&& !this.solveMaze[this.row+dir.dr][this.col+dir.dc].visited) {\n\t\t\t\t\t\t\tmoved = this.updateMaze(dir, 1, r, c)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!moved) {\n\t\t\t\t\t\tfor (let dir of this.directions) {\n\t\t\t\t\t\t\tif (this.solveMaze[this.row][this.col].val%dir.prime != 0) {\n\t\t\t\t\t\t\t\tmoved = this.updateMaze(dir, -1, r, c)\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.solveMaze = this.getMaze(this.mazeData);\n\t\t\t}\n\t\t}\n\n\t\tthis.visits = 0\n\t\tthis.row = this.startRow\n\t\tthis.col = this.startCol\n\t\t// do the animation between the two points\n\t\tthis.solveInterval = setInterval(() => {\n\t\t\tlet moved = false\n\t\t\tfor (let dir of this.directions) {\n\t\t\t\tif (this.solveMaze[this.row][this.col].val%dir.prime != 0 && !this.solveMaze[this.row+dir.dr][this.col+dir.dc].visited) {\n\t\t\t\t\t(<HTMLElement>this.maze.children[this.row].children[this.col]).style.backgroundColor = 'lightgreen';\n\t\t\t\t\tmoved = this.updateMaze(dir, 1, this.startRow, this.startCol);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!moved) {\n\t\t\t\tfor (let dir of this.directions) {\n\t\t\t\t\tif (this.solveMaze[this.row][this.col].val%dir.prime != 0) {\n\t\t\t\t\t\t(<HTMLElement>this.maze.children[this.row].children[this.col]).style.backgroundColor = '#E6E6FA';\n\t\t\t\t\t\tmoved = this.updateMaze(dir, -1, this.startRow, this.startCol);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!moved) {\n\t\t\t\tclearInterval(this.solveInterval)\n\t\t\t\tthis.makeMazePlayable('lightpink');\n\t\t\t\treturn\n\t\t\t}\t\n\t\t\t(<HTMLElement>this.maze.children[this.row].children[this.col]).style.backgroundColor = 'lightgreen';\n\t\t}, interval);\n\t}\n}\n","<div id='maze'>\n\n</div>\n\n<div>\n    <!-- <button (click)='testMazes()'>Test Mazes</button> -->\n    <select (change)='generateMaze(generator.value, boardLen.value)' name=\"generator\" id=\"generator\" #generator>\n        <option value=\"rb\">Recursive Backtracking</option>        \n        <option value=\"hak\">Hunt and Kill</option>\n        <option value=\"abv0\">Aldous-Broder Algorithm</option>\n        <option value=\"ea\">Eller's Algorithm</option>\n        <option value=\"eav\">Eller's Algorithm (Vertical)</option>\n        <option value=\"eah\">Eller's Algorithm (Horizontal)</option>\n        <option value=\"ka\">Kruskal's Algorithm</option>\n        <option value=\"pa\">Prim's Algorithm</option>\n        <option value=\"rds\">Recursive Division (Squares)</option>\n        <option value=\"rdc\">Recursive Division (Corridors)</option>\n        <option value=\"wa\">Wilson's Algorithm</option>\n        <option value=\"gt\">Growing Tree Algorithm</option>\n        <option value=\"bt\">Binary Tree Algorithm</option>\n        <option value=\"sw\">Sidewinder Algorithm</option>\n    </select>\n    <select (change)='generateMaze(generator.value, boardLen.value)' name=\"boardLen\" id=\"boardLen\" #boardLen>\n        <option value='3'>3</option>\n        <option value='4'>4</option>\n        <option value='5'>5</option>\n        <option value='6'>6</option>\n        <option value='7'>7</option>\n        <option value='8'>8</option>\n        <option value='9'>9</option>\n        <option value='10'>10</option>\n        <option value='11'>11</option>\n        <option selected value='12'>12</option>\n        <option value='13'>13</option>\n        <option value='14'>14</option>\n        <option value='15'>15</option>\n        <option value='16'>16</option>\n    </select>\n    <button (click)='generateMaze(generator.value, boardLen.value)'>Generate Maze</button>\n    <button (click)='getLongestPath(1)'>Play Maze</button>\n    <!-- <button (click)='stopSolve()'>Stop solve</button> -->\n</div>\n\n<div id='maze-stats' class=\"stats-desc\">\n   <h1>Maze Stats</h1>\n\n   <p>I implemented and tested 11 different maze generations algorithms from Jamis Buck's <a target='blank' href=\"https://weblog.jamisbuck.org/\">blog.</a>\n    Below is a description and analysis of each algorithm.</p>\n\n    <img src=\"https://gitlab.com/rileythomp14/solvers-generators/-/raw/master/mazes/gentimes.png\" alt=\"\">\n    <img src=\"https://gitlab.com/rileythomp14/solvers-generators/-/raw/master/mazes/decisions.png\" alt=\"\">\n    <img src=\"https://gitlab.com/rileythomp14/solvers-generators/-/raw/master/mazes/longest.png\" alt=\"\">\n\n   <p class='bold' style='margin-top: 0.5em'>Recursive Backtracking</p>\n    <p>Simple recursive backtracking. Start at a random cell, move to an unvisited neighbour. \n    If all the neighbours are visited, backtrack until you can move to an unvisited cell.\n    Do this until all of the cells have been visited.</p>\n\n    <img src=\"https://gitlab.com/rileythomp14/solvers-generators/-/raw/master/mazes/recursive.png\" alt=\"\">\n\n   <p class='bold'>Hunt and Kill</p>\n   <p>\n    This was a pretty easy one to implement as it was similar to recursive backtracking. Start at a random cell and move to an unvisited neighbour until you \n    reach a cell with no unvisited neighbours. Then scan the board from left to right, top to bottom until you're at a cell with a visited neighbour. Remove the wall\n    between these two cells, and then continue with moving to unvisited neighbours. Repeat this process until all of the cells have been visited. \n   </p>\n\n   <img src=\"https://gitlab.com/rileythomp14/solvers-generators/-/raw/master/mazes/hak.png\" alt=\"\">\n  \n   <p class='bold'>Aldous-Broder Algorithm</p>\n   <p>This was the first one I implemented because it was so simple and straightforward. Start at a random cell and mark it as visited. Move to a random neighbour cell. \n       If that cell has already been visited, then just move to the cell. If that cell has not been visited, then move to the cell and remove the wall between them.\n       This process is repeated until every cell in the maze has been visited.\n\n    <img src=\"https://gitlab.com/rileythomp14/solvers-generators/-/raw/master/mazes/abv0.png\" alt=\"\">\n    <img src=\"https://gitlab.com/rileythomp14/solvers-generators/-/raw/master/mazes/abv1.png\" alt=\"\">\n\n   </p>\n\n   <p class='bold'>Eller's Algorithm</p>\n   <p>This one was sort of tricky to implement. Start at the top and go row by row. Split each row into connected pieces randomly.\n    Then make at least one path down to the next row from each connected piece.</p>\n\n    <img src=\"https://gitlab.com/rileythomp14/solvers-generators/-/raw/master/mazes/ellers.png\" alt=\"\">\n    <img src=\"https://gitlab.com/rileythomp14/solvers-generators/-/raw/master/mazes/eav.png\" alt=\"\">\n    <img src=\"https://gitlab.com/rileythomp14/solvers-generators/-/raw/master/mazes/eah.png\" alt=\"\">\n\n   <p class='bold'>Kruskal's Algorithm</p>\n   <p>\n    Kruskal's algorithm is a well known CS algorithm that finds a minimum spanning tree in a connected graph, which is exactly what a maze is. It starts by assigning each cell its own value.\n    Then it randomly picks two adjacent cells that do not have the same value. It removes the wall between these two cells, and gives all the connected cells one of the values. This is repeated\n    until every cell in the maze has the same value.\n   </p>\n\n   <img src=\"https://gitlab.com/rileythomp14/solvers-generators/-/raw/master/mazes/kruskals.png\" alt=\"\">\n\n   <p class='bold'>Prim's Algorithm</p>\n   <p>\n    Prim's algorithm is another well known CS algorithm that finds a minimum spanning tree in an undirected graph, which again is what a maze is. It works by choosing a cell at random \n    and adding its neighbours to a list of potential moves. Then it picks one of these potential moves, moves to that cell, and adds its neighbours to the potential moves list.\n    This is repeated until all cells have been visited.\n   </p>\n\n   <img src=\"https://gitlab.com/rileythomp14/solvers-generators/-/raw/master/mazes/prims.png\" alt=\"\">\n  \n   <p class='bold'>Recursive Division</p>\n   <p>This one was interesting because it generates mazes differently than the rest. Instead of breaking down walls to create paths, the algorithm starts by splitting the board\n       into two regions separated by a wall, and creates one opening in the wall. Then it chooses another region, divides it into two and creats an opening between them. This process\n       is repeated until there are no more regions to divide.\n   </p>\n\n   <img src=\"https://gitlab.com/rileythomp14/solvers-generators/-/raw/master/mazes/division.png\" alt=\"\">\n\n   <p class='bold'>Wilson's Algorithm</p>\n   <p>\n    This one was fun to implement. First, it marks a random cell as visited. Then it picks another random cell to start at. From here it moves to a neighbour, marking the direction\n    that it moved away from this cell. If it moves to a cell that has already been marked with a direction, then the most recent direction is used. This process is repeated until it reaches \n    a visited cell. Then it will go back to the cell it picked to start at, and create a path from this cell to the visited cell using the directions it left marked\n    in the first stage of the algorithm. After this, it will pick another cell randomly to start marking directions from. This is done until all the cells in the maze have been visited. \n   </p>\n\n   <img src=\"https://gitlab.com/rileythomp14/solvers-generators/-/raw/master/mazes/wilsons.png\" alt=\"\">\n  \n   <p class='bold'>Growing Tree Algorithm</p>\n   <p> \n    This one is interesting because it can be tweaked to behave like different algorithms such as recursive backtracking or Prim's algorithm. It works by first picking an empty cell, marking\n    it as visited and adding it to a list of active cells. Then it picks a cell from the active cells list, moves to an unvisited neighbour by removing the wall between the two cells and\n    adding the neighbour to the list of active cells. If a cell chosen from the active cells list has no unvisited neighbours, then it is removed from the active cells list. This process\n    is repeated until the active cells list is empty. The way this algorithm can be tweaked to behave like other algorithms is based on how the cell from the active list is chosen.\n    If the newest added cell is chosen, then it behaves as the recursive backtracker would. If it chooses an active cell at random, then it behaves like Prim's algorithm.\n   </p>\n\n   <img src=\"https://gitlab.com/rileythomp14/solvers-generators/-/raw/master/mazes/growing.png\" alt=\"\">\n   \n   <p class='bold'>Binary Tree Algorithm</p>\n   <p>\n    This algorithm is by far the simplest and most straightforward one there is. For each cell, randomly remove a wall with either the cell below or to the right. The only problem with\n    algorithm is that it produces mazes that have corridors in the last row and column.\n   </p>\n\n   <img src=\"https://gitlab.com/rileythomp14/solvers-generators/-/raw/master/mazes/binary.png\" alt=\"\">\n\n   <p class='bold'>Sidewinder Algorithm</p>\n   <p>\n    Create a corridor in the first row. Then start at the second row and go down to the last row. FOr each row, randomly split the it into connected pieces. For each connected piece in the row, create 1 path to the row above\n    by removing a wall between two cells. This algorith is similar to Eller's algorithm but was a bit easier to implement.\n   </p>\n\n   <img src=\"https://gitlab.com/rileythomp14/solvers-generators/-/raw/master/mazes/sidewinder.png\" alt=\"\">\n\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.less']\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div id='footer-container'>\n    <footer class='footer'>\n        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css\" integrity=\"sha512-1ycn6IcaQQ40/MKBW2W4Rhis/DbILU74C1vSrLJxCq57o941Ym01SwNsOMqvEBFlcgUa6xLiPY/NS5R+E6ztJQ==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" />\n        <nav>\n            <a href='https://gitlab.com/rileythomp14' target='blank'><b><i class=\"fab fa-gitlab\"></i></b></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n            <a href='/about'><b><i class=\"fas fa-question\"></i></b></a> \n        </nav>\n    </footer> \n</div>\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nconst httpOptions ={\n\theaders: new HttpHeaders({\n\t\t'Content-type': 'application-json'\n\t}),\n\tparams: {}\n}\n\n@Injectable({\n\tprovidedIn: 'root'\n})\nexport class SudokusolverService {\n\thost:string = 'https://solvegen-server.herokuapp.com';\n\n\tconstructor(private http:HttpClient) { }\n\n\tgetBoard(board:string):Observable<string> {\n\t\tlet path:string = '/board';\n\t\tlet query:string = '?board=' + board;\n\t\treturn this.http.get<string>(this.host + path + query);\n\t}\n\n\tgetRandomBoard(diff:string):Observable<any> {\n\t\treturn this.http.get<any>('https://sugoku2.herokuapp.com/board?difficulty=' + diff);\n\t}\n\n\tvalidateBoard(board:string):Observable<boolean> {\n\t\tlet path:string = '/validate';\n\t\tlet query:string = '?board=' + board;\n\t\treturn this.http.get<boolean>(this.host + path + query);\n\t}\n\n\tsolveBoard(board:string):Observable<string> {\n\t\tlet path:string = '/solve';\n\t\tlet query:string = '?board=' + board;\n\t\treturn this.http.get<string>(this.host + path + query);\n\t}\n\n\ttestSolvers():Observable<Number> {\n\t\tlet path:string = '/test';\n\t\treturn this.http.get<Number>(this.host + path);\n\t}\n\n\tpartialSolve(board:string):Observable<string> {\n\t\tlet path:String = '/partial';\n\t\tlet query:string = '?board=' + board;\n\t\treturn this.http.get<string>(this.host + path + query);\n\t}\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { SudokusolverService } from 'src/app/services/sudokusolver.service';\n\n@Component({\n\tselector: 'app-sudoku-table',\n\ttemplateUrl: './sudoku-table.component.html',\n\tstyleUrls: ['./sudoku-table.component.less']\n})\nexport class SudokuTableComponent implements OnInit {\n\t@Input() boardTitle:string;\n\n\tconstructor(private sudokuGoService: SudokusolverService) { }\n\n\tngOnInit():void { }\n\n\tgetBoard():string {\n\t\tlet board:string = '';\n\t\tlet table = document.getElementById('input-board').children[0];\n\n\t\tfor (let i = 1; i < table.children.length; ++i) {\n\t\t\tfor (let j = 0; j < table.children[i].children.length; ++j) {\n\t\t\t\tlet val:string = (<HTMLInputElement>table.children[i].children[j].children[0]).value;\n\t\t\t\tboard += (val === '' ? 0 : val);\n\t\t\t}\n\t\t}\n\n\t\treturn board;\n\t}\n\n\tkeyUp(ev):void {\n\t\tthis.sudokuGoService.validateBoard(this.getBoard()).subscribe(res => {\n\t\t\tif (res && ev.key >= '1' && ev.key <= '9') {\n\t\t\t\tev.target.value = ev.key;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tev.target.value = '';\n\t\t\t}\n\t\t});\n\t}\n\n\thighlightCells(ev) {\n\t\tlet index = Number(ev.target.parentElement.id.replace('cell', ''));\n\n\t\tlet r = Math.floor(index/9);\n\t\tlet c = index%9;\n\t\tlet q = Math.floor(r/3)*3 + Math.floor(c/3);\n\n\t\tlet input = document.getElementById('input-board').children[0].children;\n\n\t\tfor (let i = 0; i < 9; i++) {\n\t\t\tfor (let j = 0; j < 9; j++) {\n\t\t\t\tlet color = 'white';\n\t\t\t\tif (c == j || r == i || q == Math.floor(i/3)*3 + Math.floor(j/3)) {\n\t\t\t\t\tcolor = '#E6E6FA';\n\t\t\t\t}\n\t\t\t\t(<HTMLInputElement>input[i+1].children[j]).style.backgroundColor = color;\n\t\t\t\t(<HTMLInputElement>input[i+1].children[j].children[0]).style.backgroundColor = color;\n\t\t\t}\n\t\t}\n\n\t\t(<HTMLInputElement>input[r+1].children[c]).style.backgroundColor = '#9370DB';\n\t\t(<HTMLInputElement>input[r+1].children[c].children[0]).style.backgroundColor = '#9370DB';\n\t}\n}\n","<table class='board'>\n    <p class='board-title'>{{ boardTitle }}</p>\n    <tr>\n        <td class='border-top border-left'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-top'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-top'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-top border-left'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-top'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-top'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-top border-left'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-top'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-top border-right'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n    </tr>\n    <tr>\n        <td class='border-left'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-left'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-left'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-right'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n    </tr>\n    <tr>\n        <td class='border-left'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-left'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-left'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-right'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n    </tr>\n    <tr>\n        <td class='border-top border-left'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-top'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-top'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-top border-left'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-top'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-top'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-top border-left'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-top'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-top border-right'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n    </tr>\n    <tr>\n        <td class='border-left'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-left'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-left'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-right'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n    </tr>\n    <tr>\n        <td class='border-left'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-left'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-left'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-right'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n    </tr>\n    <tr>\n        <td class='border-top border-left'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-top'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-top'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-top border-left'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-top'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-top'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-top border-left'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-top'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-top border-right'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n    </tr>\n    <tr>\n        <td class='border-left'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-left'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-left'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-right'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n    </tr>\n    <tr>\n        <td class='border-bottom border-left'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-bottom'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-bottom'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-bottom border-left'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-bottom'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-bottom'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-bottom border-left'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-bottom'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n        <td class='border-bottom border-right'><input type='text' maxlength='1' (keyup)='keyUp($event)' (focus)='highlightCells($event)'></td>\n    </tr>\n</table>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.less']\n})\nexport class AppComponent {\n}\n","<div>\n  <app-header></app-header>\n  <router-outlet></router-outlet>\n  <app-footer></app-footer>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HeaderComponent } from './components/header/header.component';\nimport { SudokuTableComponent } from './components/sudoku-table/sudoku-table.component';\nimport { SudokuComponent } from './components/sudoku/sudoku.component';\nimport { AboutComponent } from './components/about/about.component';\nimport { MazesComponent } from './components/mazes/mazes.component';\nimport { SudokuStatsComponent } from './components/sudoku-stats/sudoku-stats.component';\nimport { FooterComponent } from './components/footer/footer.component';\nimport { TruchetComponent } from './components/truchet/truchet.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    SudokuTableComponent,\n    SudokuComponent,\n    AboutComponent,\n    MazesComponent,\n    SudokuStatsComponent,\n    FooterComponent,\n    TruchetComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-sudoku-stats',\n  templateUrl: './sudoku-stats.component.html',\n  styleUrls: ['./sudoku-stats.component.less']\n})\nexport class SudokuStatsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n\n  }\n\n}\n","<p style='margin: 1em'>I've created 5 different sudoku solvers, each using a different combination of solving techniques. <br>\n    These are brief descriptions and results of each solver run on 3000 sudoku boards of varying difficulty. <br>\n    More detailed results of the solver tests can be found on this Google Sheet. <a target='blank' href=\"https://docs.google.com/spreadsheets/d/1tHCD08ERWCU1J68tiZQDC-PQI2rvgpKuQFDB39EXgCw/edit?usp=sharing\">Link</a>.</p>\n<p style='margin: 1em'>NB: The average solve times are much higher than the median solve times due to outliers, and the times are heavily skewed towards the median.</p>\n\n<hr>\n\n<img src='https://docs.google.com/spreadsheets/d/e/2PACX-1vTEMS8dsML6NKs2_hk0BZb1qDZ62Zo_td38U7w6RKF8-VSOnJBYJZsHr0YJgbaFNQQn7JElmprLM_of/pubchart?oid=1472206235&format=image'>\n<p class='solver-caption'>Median: 0.51 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Average: 37.34  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Max: 11:07:12</p>\n<div>\n    <p>The first solver. It's just a naive implemenation of a recursive backtrack to solve the board. <br>\n         This solver has a very slow median solve time of 0.51 seconds, and an extremely long maximum solve time of over 11 hours!</p>\n</div>\n\n<hr>\n\n<img src='https://docs.google.com/spreadsheets/d/e/2PACX-1vTEMS8dsML6NKs2_hk0BZb1qDZ62Zo_td38U7w6RKF8-VSOnJBYJZsHr0YJgbaFNQQn7JElmprLM_of/pubchart?oid=1530479283&format=image'>\n<p class='solver-caption'>Median: 0.10 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Average: 25.04  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Max: 11:11:40</p>\n<div>\n    <p>The second solver. This one has 2 steps:</p>\n    <ol>\n        <li>Determines each cell's possibilities by making logical deductions by checking it's row, column and box, and fill it in if there's only 1 possibility.</li>\n        <li>Recursively backtrack to solve the rest of the board.</li>\n    </ol>\n    <p>This is much faster than the first solver, with a median solve time of 0.1 seconds, a 5x improvement thanks to the logical deductions.<br>\n         However it still has a very long max solve time of over 11 hours, in the case when there are no deductions possible and it must just backtrack.</p>\n</div>\n\n<hr>\n\n<img src='https://docs.google.com/spreadsheets/d/e/2PACX-1vTEMS8dsML6NKs2_hk0BZb1qDZ62Zo_td38U7w6RKF8-VSOnJBYJZsHr0YJgbaFNQQn7JElmprLM_of/pubchart?oid=80570197&format=image'>\n<p class='solver-caption'>Median: 0.06 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Average: 1.16  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Max: 7:34</p>\n<div>\n    <p>The third solver. This one has 3 steps:</p>\n    <ol>\n        <li>Determines each cell's possibilities by making logical deductions, and fill it in if there's only 1 possibility.</li>\n        <li>If necessary, flip the board so that whichever of the top or bottom half has more cells filled in is at the top, for more efficient backtracking.</li>\n        <li>Recursively backtrack to solve the rest of the board.</li>\n    </ol>\n    <p>Again, this solver is much faster than the previous, with a median solve time of 0.06 seconds, a 40% improvement. <br>\n        Backtracking from the side with more cells filled in really helps at the outliers, shown by the max solve time falling from over 11 hours to less than 8 minutes. </p>\n</div>\n\n<hr>\n\n<img src='https://docs.google.com/spreadsheets/d/e/2PACX-1vTEMS8dsML6NKs2_hk0BZb1qDZ62Zo_td38U7w6RKF8-VSOnJBYJZsHr0YJgbaFNQQn7JElmprLM_of/pubchart?oid=2051768902&format=image'>\n<p class='solver-caption'>Median: 0.03 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Average: 7.03  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Max: 3:13:45</p>\n<div>\n    <p>The fourth solver. This one only has 2 steps: </p>\n    <ol>\n        <li>Determines each cell's possibilities by making logical deductions, and fill it in if there's only 1 possibility.</li>\n        <li>Recursively backtrack to solve the rest of the board, using only the possibilities from the logical deduction to reduce the search space.</li>\n    </ol>\n    <p>This solver has the fastest median solve time so far of 0.03 seconds, a 2x improvement over the prevoius solver. <br>\n        This is thanks to this solver only backtracking with logically possible values instead of trying every number. <br>\n        However, it still has a very large max solve time since it doesn't recursively backtrack from the side with more cells filled in.</p>\n</div>\n\n<hr>\n\n<img src='https://docs.google.com/spreadsheets/d/e/2PACX-1vTEMS8dsML6NKs2_hk0BZb1qDZ62Zo_td38U7w6RKF8-VSOnJBYJZsHr0YJgbaFNQQn7JElmprLM_of/pubchart?oid=907390625&format=image'>\n<p class='solver-caption'>Median: 0.01 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Average: 0.29  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Max: 1:47</p>\n<div>\n    <p>The fifth and fastest solver. This one combines all 3 techniques: </p>\n    <ol>\n        <li>Determines each cell's possibilities by making logical deductions, and fill it in if there's only 1 possibility.</li>\n        <li>If necessary, flip the board so that whichever of the top or bottom half has more cells filled in is at the top, for more efficient backtracking.</li>\n        <li>Recursively backtrack to solve the rest of the board, using only the possibilities from the logical deduction to reduce the search space.</li>\n    </ol>\n    <p>This solver has a very fast median solve time of 0.01 seconds, a 3x improvement over the next fastest solver. <br>\n        It also has by far the lowest max solve time of 1:47, since it will both flip the board and only backtrack with logically possible moves.</p>\n</div>\n\n<hr>\n\n<div>\n    <p>As the results show, the median solve time is reduced by performing logical deductions on the board and only backtracking with logically possible values.</p>\n    <p>This makes sense since it will help to only backtrack with possible values in every board, so the median time goes down. </p>\n    <p>To lower the max and average solve times the recursive backtracking needs to be done from the side that had more cells filled in. <br>\n       By starting on the side with more cells filled in, the solver is more likely reach contradictions early on and need to backtrack. <br>\n       This will greatly reduce the search space compard to not reaching a contradiciton and needing to backtrack until later in the board.</p>\n</div>\n\n<hr>\n","import { Component, OnInit } from '@angular/core';\nimport { SudokusolverService } from 'src/app/services/sudokusolver.service';\n\n@Component({\n\tselector: 'app-sudoku',\n\ttemplateUrl: './sudoku.component.html',\n\tstyleUrls: ['./sudoku.component.less']\n})\nexport class SudokuComponent implements OnInit {\n\n\tconstructor(private sudokuGoService: SudokusolverService) { }\n\n\tngOnInit():void {\n\t\tlet input = document.getElementById('input-board').children[0].children;\t\n\t\tfor (let i = 1; i < input.length; ++i) {\n\t\t\tfor (let j = 0; j < input[i].children.length; ++j) {\n\t\t\t\t(<HTMLInputElement>input[i].children[j]).id = 'cell'+(9*(i-1)+j);\n\t\t\t}\n\t\t}\n\t\tthis.randomBoard('random');\n\t}\n\n\tgetBoard(): string {\n\t\tlet board: string = '';\n\t\tlet table = document.getElementById('input-board').children[0];\n\n\t\tfor (let i = 1; i < table.children.length; ++i) {\n\t\t\tfor (let j = 0; j < table.children[i].children.length; ++j) {\n\t\t\t\tlet val:string = (<HTMLInputElement>table.children[i].children[j].children[0]).value;\n\t\t\t\tboard += (val === '' ? 0 : val);\n\t\t\t}\n\t\t}\n\n\t\treturn board;\n\t}\n\n\tsetBoardBackground(bgColor:string) {\n\t\tlet inputBoard = document.getElementById('input-board').children[0].children;\n\t\tfor (let i = 1; i < inputBoard.length; i++) {\n\t\t\tlet row = inputBoard[i].children;\n\t\t\tfor (let j = 0; j < row.length; j++) {\n\t\t\t\tlet cell = (<HTMLElement>row[j]);\n\t\t\t\tcell.style.backgroundColor = bgColor;\n\t\t\t\t(<HTMLElement>cell.children[0]).style.backgroundColor = bgColor;\n\t\t\t}\n\t\t}\n\t}\n\n\tvalidateBoard():void {\n\t\tlet board:string = this.getBoard();\n\n\t\tthis.sudokuGoService.validateBoard(board).subscribe(res => {\n\t\t\tlet bgColor = (res ? '#90ee90' : '#ffcccb');\n\t\t\tthis.setBoardBackground(bgColor);\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.setBoardBackground('white');\n\t\t\t\tthis.highlightRandom(board);\n\t\t\t}, 1000);\n\n\t\t});\n\t}\n\n\tsolveBoard(): void {\n\t\tlet table = document.getElementById('input-board').children[0];\n\t\tdocument.getElementById('loader').style.visibility = 'visible';\n\n\t\tlet board: string = this.getBoard();\n\t\tthis.sudokuGoService.solveBoard(board).subscribe(res => {\n\t\t\tfor (let i = 1; i < table.children.length; ++i) {\n\t\t\t\tfor (let j = 0; j < table.children[i].children.length; ++j) {\n\t\t\t\t\tlet index:number = 9 * (i-1) + j;\n\t\t\t\t\tif (board[index] != '0') {\n\t\t\t\t\t\t(<HTMLInputElement>table.children[i].children[j].children[0]).value = res[index];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet row:number = 0;\n\t\t\tlet col:number = 0;\n\t\t\tlet interval = setInterval(() => {\n\t\t\t\tlet index:number = 9*Math.floor(row/9) + (col%9);\n\t\t\t\tif (index > 80) {\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t}\n\t\t\t\tif (board[index] == '0') {\n\t\t\t\t\t(<HTMLInputElement>table.children[Math.floor(row/9)+1].children[col%9].children[0]).value = res[index];\n\t\t\t\t}\n\t\t\t\tcol++;\n\t\t\t\trow++;\n\t\t\t}, 25)\n\n\t\t\tdocument.getElementById('loader').style.visibility = 'hidden';\n\t\t})\n\t}\n\n\tclearBoard():void {\n\t\tlet input = document.getElementById('input-board').children[0];\n\t\tfor (let i = 1; i < input.children.length; ++i) {\n\t\t\tfor (let j = 0; j < input.children[i].children.length; ++j) {\n\t\t\t\t// (<HTMLInputElement>solved.children[i].children[j].children[0]).value = '';\n\t\t\t\t(<HTMLInputElement>input.children[i].children[j].children[0]).value = '';\n\t\t\t}\n\t\t}\n\n\t\tthis.setBoardBackground('white');\n\t}\n\n\thighlightRandom(board):void {\n\t\tlet table = document.getElementById('input-board').children[0];\n\t\tlet randx = Math.floor(Math.random()*9);\n\t\tlet randy = Math.floor(Math.random()*9);\n\t\tlet tries = 0;\n\t\twhile (board[randy*9 + randx] != '0' && tries < 100) {\n\t\t\trandx = Math.floor(Math.random()*9);\n\t\t\trandy = Math.floor(Math.random()*9);\n\t\t\ttries++;\n\t\t}\n\n\t\tif (tries < 100) {\n\t\t\t(<HTMLInputElement>table.children[randy+1].children[randx].children[0]).focus();\n\t\t}\n\t}\n\n\trandomBoard(diff:string):void {\n\t\tthis.clearBoard();\n\t\tlet table = document.getElementById('input-board').children[0];\n\t\tthis.sudokuGoService.getRandomBoard(diff).subscribe(res => {\n\t\t\tlet board = res.board;\n\t\t\tfor (let i = 0; i < board.length; ++i) {\n\t\t\t\tfor (let j = 0; j < board[i].length; ++j) {\n\t\t\t\t\tif (board[i][j] != '0') {\n\t\t\t\t\t\t(<HTMLInputElement>table.children[i+1].children[j].children[0]).value = board[i][j];\n\t\t\t\t\t\t(<HTMLInputElement>table.children[i+1].children[j].children[0]).disabled = true;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t(<HTMLInputElement>table.children[i+1].children[j].children[0]).disabled = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.highlightRandom(board.flat().join(''));\n\t\t})\n\t}\n\n\ttestSolvers():void {\n\t\tthis.sudokuGoService.testSolvers().subscribe(res => {\n\t\t\tconsole.log(res);\n\t\t});\n\t}\n\n\tpartialSolve():void {\n\t\tlet table = document.getElementById('input-board').children[0];\n\t\tdocument.getElementById('loader').style.visibility = 'visible';\n\n\t\tlet board: string = this.getBoard();\n\t\tthis.sudokuGoService.partialSolve(board).subscribe(res => {\n\n\t\t\tif (board == res) {\n\t\t\t\tdocument.getElementById('loader').style.visibility = 'hidden';\n\t\t\t\talert('The solver could not make any logical deductions for this board');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (let i = 1; i < table.children.length; ++i) {\n\t\t\t\tfor (let j = 0; j < table.children[i].children.length; ++j) {\n\t\t\t\t\tlet index:number = 9 * (i-1) + j;\n\t\t\t\t\tif (board[index] != '0') {\n\t\t\t\t\t\t(<HTMLInputElement>table.children[i].children[j].children[0]).value = res[index];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet row:number = 0;\n\t\t\tlet col:number = 0;\n\t\t\tlet interval = setInterval(() => {\n\t\t\t\tlet index:number = 9*Math.floor(row/9) + (col%9);\n\t\t\t\tif (index > 80) {\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t}\n\t\t\t\tif (board[index] == '0' && res[index] != '0') {\n\t\t\t\t\t(<HTMLInputElement>table.children[Math.floor(row/9)+1].children[col%9].children[0]).value = res[index];\n\t\t\t\t}\n\t\t\t\tcol++;\n\t\t\t\trow++;\n\t\t\t}, 25)\n\n\t\t\tdocument.getElementById('loader').style.visibility = 'hidden';\n\t\t})\n\t}\n}\n","<div id='boards-container'>\n    <app-sudoku-table id='input-board' [boardTitle]=\"''\">\n    </app-sudoku-table>\n</div>\n\n<div>\n</div>\n\n<div id='solve-button'>\n    <button (click)='randomBoard(\"easy\")'>Easy Board</button>\n    <button (click)='randomBoard(\"medium\")'>Medium Board</button>\n    <button (click)='randomBoard(\"hard\")'>Hard Board</button>\n    <br>\n    <button (click)='validateBoard()'>Validate Board</button>\n    <button (click)='partialSolve()'>Partial Solve</button>\n    <button (click)='solveBoard()'>Solve Board</button>\n    <button (click)='clearBoard()'>Clear Board</button>\n    <br>\n</div>\n\n<div id=\"loader\"></div>\n\n<div id='sudoku-stats'>\n    <h1>Sudoku Stats</h1>\n\n    <p>I've created 5 different sudoku solvers, each using a different combination of solving techniques. <br>\n        These are brief descriptions and results of each solver run on 3000 sudoku boards of varying difficulty. <br>\n        More detailed results of the solver tests can be found on this Google Sheet. <a target='blank' href=\"https://docs.google.com/spreadsheets/d/1tHCD08ERWCU1J68tiZQDC-PQI2rvgpKuQFDB39EXgCw/edit?usp=sharing\">Link</a>.</p>\n    <p>NB: The average solve times are much higher than the median solve times due to outliers, and the times are heavily skewed towards the median.</p>\n    \n    <hr>\n    \n    <img src='https://docs.google.com/spreadsheets/d/e/2PACX-1vTEMS8dsML6NKs2_hk0BZb1qDZ62Zo_td38U7w6RKF8-VSOnJBYJZsHr0YJgbaFNQQn7JElmprLM_of/pubchart?oid=1472206235&format=image'>\n    <p class='solver-caption'>Median: 0.51 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Average: 37.34  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Max: 11:07:12</p>\n    <div>\n        <p>The first solver. It's just a naive implemenation of a recursive backtrack to solve the board. <br>\n                This solver has a very slow median solve time of 0.51 seconds, and an extremely long maximum solve time of over 11 hours!</p>\n    </div>\n    \n    <hr>\n    \n    <img src='https://docs.google.com/spreadsheets/d/e/2PACX-1vTEMS8dsML6NKs2_hk0BZb1qDZ62Zo_td38U7w6RKF8-VSOnJBYJZsHr0YJgbaFNQQn7JElmprLM_of/pubchart?oid=1530479283&format=image'>\n    <p class='solver-caption'>Median: 0.10 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Average: 25.04  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Max: 11:11:40</p>\n    <div>\n        <p>The second solver. This one has 2 steps:</p>\n        <ol>\n            <li>Determines each cell's possibilities by making logical deductions by checking it's row, column and box, and fill it in if there's only 1 possibility.</li>\n            <li>Recursively backtrack to solve the rest of the board.</li>\n        </ol>\n        <p>This is much faster than the first solver, with a median solve time of 0.1 seconds, a 5x improvement thanks to the logical deductions.<br>\n                However it still has a very long max solve time of over 11 hours, in the case when there are no deductions possible and it must just backtrack.</p>\n    </div>\n    \n    <hr>\n    \n    <img src='https://docs.google.com/spreadsheets/d/e/2PACX-1vTEMS8dsML6NKs2_hk0BZb1qDZ62Zo_td38U7w6RKF8-VSOnJBYJZsHr0YJgbaFNQQn7JElmprLM_of/pubchart?oid=80570197&format=image'>\n    <p class='solver-caption'>Median: 0.06 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Average: 1.16  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Max: 7:34</p>\n    <div>\n        <p>The third solver. This one has 3 steps:</p>\n        <ol>\n            <li>Determines each cell's possibilities by making logical deductions, and fill it in if there's only 1 possibility.</li>\n            <li>If necessary, flip the board so that whichever of the top or bottom half has more cells filled in is at the top, for more efficient backtracking.</li>\n            <li>Recursively backtrack to solve the rest of the board.</li>\n        </ol>\n        <p>Again, this solver is much faster than the previous, with a median solve time of 0.06 seconds, a 40% improvement. <br>\n            Backtracking from the side with more cells filled in really helps at the outliers, shown by the max solve time falling from over 11 hours to less than 8 minutes. </p>\n    </div>\n    \n    <hr>\n    \n    <img src='https://docs.google.com/spreadsheets/d/e/2PACX-1vTEMS8dsML6NKs2_hk0BZb1qDZ62Zo_td38U7w6RKF8-VSOnJBYJZsHr0YJgbaFNQQn7JElmprLM_of/pubchart?oid=2051768902&format=image'>\n    <p class='solver-caption'>Median: 0.03 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Average: 7.03  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Max: 3:13:45</p>\n    <div>\n        <p>The fourth solver. This one only has 2 steps: </p>\n        <ol>\n            <li>Determines each cell's possibilities by making logical deductions, and fill it in if there's only 1 possibility.</li>\n            <li>Recursively backtrack to solve the rest of the board, using only the possibilities from the logical deduction to reduce the search space.</li>\n        </ol>\n        <p>This solver has the fastest median solve time so far of 0.03 seconds, a 2x improvement over the prevoius solver. <br>\n            This is thanks to this solver only backtracking with logically possible values instead of trying every number. <br>\n            However, it still has a very large max solve time since it doesn't recursively backtrack from the side with more cells filled in.</p>\n    </div>\n    \n    <hr>\n    \n    <img src='https://docs.google.com/spreadsheets/d/e/2PACX-1vTEMS8dsML6NKs2_hk0BZb1qDZ62Zo_td38U7w6RKF8-VSOnJBYJZsHr0YJgbaFNQQn7JElmprLM_of/pubchart?oid=907390625&format=image'>\n    <p class='solver-caption'>Median: 0.01 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Average: 0.29  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Max: 1:47</p>\n    <div>\n        <p>The fifth and fastest solver. This one combines all 3 techniques: </p>\n        <ol>\n            <li>Determines each cell's possibilities by making logical deductions, and fill it in if there's only 1 possibility.</li>\n            <li>If necessary, flip the board so that whichever of the top or bottom half has more cells filled in is at the top, for more efficient backtracking.</li>\n            <li>Recursively backtrack to solve the rest of the board, using only the possibilities from the logical deduction to reduce the search space.</li>\n        </ol>\n        <p>This solver has a very fast median solve time of 0.01 seconds, a 3x improvement over the next fastest solver. <br>\n            It also has by far the lowest max solve time of 1:47, since it will both flip the board and only backtrack with logically possible moves.</p>\n    </div>\n    \n    <hr>\n    \n    <div>\n        <p style='margin-top: 1em;'>As the results show, the median solve time is reduced by performing logical\n            deductions on the board and only backtracking with logically possible values. This makes sense since it\n            will help to only backtrack with possible values in every board, so the median time goes down. </p>\n        <p>To lower the max and average solve times (i.e. remove the outliers) the recursive backtracking needs to be done from the side that had more cells filled in.\n            By starting on the side with more cells filled in, the solver is more likely reach contradictions early on and need to backtrack.\n            This will greatly reduce the search space compard to not reaching a contradiciton and needing to backtrack until later in the board.</p>\n    </div>\n    \n    <hr>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n\tselector: 'app-truchet',\n\ttemplateUrl: './truchet.component.html',\n\tstyleUrls: ['./truchet.component.less']\n})\nexport class TruchetComponent implements OnInit {\n\n\tconstructor() { }\n\n\tngOnInit(): void {\n\t\tthis.generateTruchet(50);\n\t}\n\n\tgenerateTruchet(radius:number) {\n\t\tlet canvas = <HTMLCanvasElement>document.getElementById('myCanvas');\n\t\tlet context = canvas.getContext('2d');\n\t\tcontext.clearRect(0, 0, canvas.width, canvas.height);\n\t\tcontext.fillStyle = 'rgba(0, 0, 0, 0)';\n\t\tcontext.strokeStyle = 'black';\n\t\tcontext.lineWidth = 2;\n\t\tlet length = canvas.height;\n\t\tlet r = radius;\n\t\tlet angle=0\n\n\t\tfor (let i = 0; i < length/(2*r); i++) {\n\t\t\tfor (let j = 0; j < length/(2*r); j++) {\n\t\t\t\tif (Math.random() < 0.5) {\n\t\t\t\t\tcontext.beginPath();\n\t\t\t\t\tangle=1.5*Math.PI\n\t\t\t\t\tcontext.arc(2*r*j,2*r*(i+1), r, angle, angle+Math.PI/2, false);\n\t\t\t\t\tcontext.fill();\n\t\t\t\t\tcontext.stroke();\n\t\t\t\t\t\n\t\t\t\t\tcontext.beginPath();\n\t\t\t\t\tangle=0.5*Math.PI\n\t\t\t\t\tcontext.arc(2*r*(j+1),2*r*i, r, angle, angle+Math.PI/2, false);\n\t\t\t\t\tcontext.fill();\n\t\t\t\t\tcontext.stroke();\n\t\t\t\t} else {\n\t\t\t\t\tcontext.beginPath();\n\t\t\t\t\tangle = 0\n\t\t\t\t\tcontext.arc(2*r*j, 2*r*i, r, angle, angle+Math.PI/2, false);\n\t\t\t\t\tcontext.fill();\n\t\t\t\t\tcontext.stroke();\n\t\t\t\t\t\n\t\t\t\t\tcontext.beginPath();\n\t\t\t\t\tangle=Math.PI\n\t\t\t\t\tcontext.arc(2*r*(j+1), 2*r*(i+1), r, angle, angle+Math.PI/2, false);\n\t\t\t\t\tcontext.fill();\n\t\t\t\t\tcontext.stroke();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","<canvas id=\"myCanvas\" width=\"500\" height=\"500\"></canvas>\n<select (change)='generateTruchet(boardLen.value)' name=\"boardLen\" id=\"boardLen\" #boardLen>\n    <option value='250'>1</option>\n    <option value='125'>2</option>\n    <option selected value='50'>3</option>\n    <option value='25'>4</option>\n    <option value='10'>5</option>\n</select>\n<button (click)='generateTruchet(boardLen.value)'>Generate Board</button>\n<div id='maze-stats' class=\"stats-desc\">\n   <h1>Truchet Tiles</h1>\n\n   <p>Truchet tiles are a way to decorate and create patterns on a grid using square tiles. This one uses two tiles, each with 2 quarter circles at opposite corners. Each grid cell is randomly assigned one of these tiles, which creates different patterns. </p>\n</div>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SudokuComponent } from './components/sudoku/sudoku.component';\nimport { AboutComponent } from './components/about/about.component'\nimport { MazesComponent } from './components/mazes/mazes.component'\nimport { TruchetComponent } from './components/truchet/truchet.component'\nimport { SudokuStatsComponent } from './components/sudoku-stats/sudoku-stats.component'\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MazesComponent\n  },\n  {\n    path: 'sudoku',\n    component: SudokuComponent\n  },\n  {\n    path: 'about',\n    component: AboutComponent\n  },\n  {\n    path: 'mazes',\n    component: MazesComponent\n  },\n  {\n    path: 'truchet',\n    component: TruchetComponent\n  },\n  {\n    path: 'sudoku/stats',\n    component: SudokuStatsComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nconst httpOptions ={\n\theaders: new HttpHeaders({\n\t\t'Content-type': 'application-json'\n\t}),\n\tparams: {}\n}\n\n@Injectable({\n\tprovidedIn: 'root'\n})\nexport class MazesService {\n\thost:string = 'https://solvegen-server.herokuapp.com';\n\n\tconstructor(private http:HttpClient) { }\n\n\tgetMaze(size:number, type:string):Observable<number[]> {\n\t\tlet path:string = '/maze';\n\t\tlet query:string = '?size=' + size + '&type=' + type;\n\t\treturn this.http.get<number[]>(this.host + path + query)\n\t}\n\n\ttestMazes():Observable<string> {\n\t\tlet path:string = '/test';\n\t\treturn this.http.get<string>(this.host + path);\n\t}\n}","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}